@inherits View<FormStepModel>

<MxView IsLoading="IsLoading">
	<Actions>
		&nbsp;
		<OptionMenu>
			<Items>
				<OptionItem Text="Add field" OnClick="() => EditField()" />
			</Items>			
		</OptionMenu>
	</Actions>
	<Body>
		<DataField Label="@I18n.Model.FormStepModel_Name" LabelSize="2">
			<Content>
				<strong>@Model.Name</strong>
			</Content>
		</DataField>
		<DataField Label="@I18n.Model.FormStepModel_Code" LabelSize="2">
			<Content>
				<strong>@Model.Code</strong>
			</Content>
		</DataField>
		@if (!string.IsNullOrEmpty(Model.Description))
		{
			<DataField Label="@I18n.Model.FormStepModel_Description" LabelSize="2">
				<Content>
					<strong>@Model.Description</strong>
				</Content>
			</DataField>
		}
		<DataField Label="@I18n.Model.FormStepModel_StepType" LabelSize="2">
			<Content>
				<strong>@I18n.Enums.Get(Model.Type)</strong>
			</Content>
		</DataField>


		@if (Model.Type == EnumStepType.FieldStep)
		{
			<TelerikTabStrip>
				<TabStripTab Title="Fields">
					<TelerikGrid Data=@Model.Fields.OrderBy(x => x.Position)
								 Resizable="true"
								 Pageable="false"
								 RowDraggable="true"
								 SelectionMode="@GridSelectionMode.Multiple"
								 OnRowDrop="@(async (GridRowDropEventArgs<StepFieldModel> args) => await StepFieldDropAsync(args))">
						<GridColumns>
							<GridColumn Field=@nameof(StepFieldModel.Position) Title="Position" Width="80px">
								<Template>
									@{
										var item = context as StepFieldModel;
										<div># <strong>@item.Position</strong></div>
									}
								</Template>
							</GridColumn>
							<GridColumn Field=@nameof(StepFieldModel.Field.Type) Title="Type" Width="100px">
								<Template>
									@{
										var item = context as StepFieldModel;
										<span>@item.Field?.Type</span>
									}
								</Template>
							</GridColumn>
							<GridColumn Field=@nameof(StepFieldModel.ExceptionValue) Title="Exception" Width="100px">
								<Template>
									@{
										var item = context as StepFieldModel;
										var exception = ExceptionItemList.SingleOrDefault(x => x.Id == item.ExceptionValue);
										if(exception != null)
										{
											<span>@exception.Name</span>
										}										
									}
								</Template>
							</GridColumn>
							<GridColumn Field=@nameof(StepFieldModel.Step.Name) Title="Name" Width="700px">
								<Template>
									@{
										var item = context as StepFieldModel;
										<span>@item.Field?.Name</span>
										<Separator />
										<small class="text-muted">@item.Field?.Title</small>
									}
								</Template>
							</GridColumn>
							<GridColumn Width="100px">
								<Template>
									@{
										var item = context as StepFieldModel;
										<Button Icon="FontIcon.Pencil" FillMode="@ThemeConstants.Button.FillMode.Link" OnClick="() => EditField(item)" />
										<Button Icon="FontIcon.Trash" FillMode="@ThemeConstants.Button.FillMode.Link" OnClick="async () => await DeleteAsync(item)" />
									}
								</Template>
							</GridColumn>
						</GridColumns>
					</TelerikGrid>
				</TabStripTab>
			</TelerikTabStrip>
		}

		<TelerikWindow Class="demo-window"
					   Width="60%"
					   Height="40%"
					   Modal="true"
					   Visible="_isWindowVisible">
			<WindowTitle>
				<strong>Add field</strong>
			</WindowTitle>
			<WindowActions>
				<WindowAction Name="Save" Icon="FontIcon.Save" OnClick="async () => await SaveStepFieldAsync()"></WindowAction>
				<WindowAction Name="Close" OnClick="() => { _isWindowVisible = false; }"></WindowAction>
			</WindowActions>
			<WindowContent>
				<Row>
					<Cell Size="2">
						Field
					</Cell>
					<Cell Size="10">
						<TelerikDropDownList Value="StepField.Field.Id"
											 ValueChanged="(long id) => OnFieldChanged(id)"
											 Data="Fields"
											 ValueField="Id"
											 TextField="Name"
											 DefaultText="">
							<ItemTemplate>
								<div class="d-flex align-items-start">
									<div class="flex-grow-1">
										<div class="mb-2">
											<TelerikFontIcon Icon="GetFieldIcon(context.Type)"
															 ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Primary"
															 Size="@ThemeConstants.Button.Size.Small" />
											<strong class="ms-2">@context.Name</strong>
										</div>
										<small>@context.Title</small>
									</div>
								</div>
							</ItemTemplate>
						</TelerikDropDownList>
					</Cell>
				</Row>
				<Row>
					<Cell Size="2">
						Is optional
					</Cell>
					<Cell Size="4">
						<TelerikSwitch @bind-Value="StepField.IsOptional" />
					</Cell>
				</Row>
				@if (StepField.Field?.Type == EnumFieldType.Question)
				{
					<Row>
						<Cell Size="2">
							Exception
						</Cell>
						<Cell Size="4">
							<TelerikDropDownList @bind-Value="StepField.ExceptionValue"
												 Data="ExceptionItemList"
												 ValueField="Id"
												 TextField="Name"
												 DefaultText="" />
						</Cell>
					</Row>
				}
			</WindowContent>
		</TelerikWindow>
	</Body>
</MxView>